{"ts":1375740375403,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\n  var codename, coffeescript_helpers, copy_data_to, express, fs, jquery, jsdom, log, minify, path, sammy, socketio, uglify, uuid, views, zappa;\n  var __slice = Array.prototype.slice, __hasProp = Object.prototype.hasOwnProperty, __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (__hasProp.call(this, i) && this[i] === item) return i; } return -1; };\n\n  zappa = {\n    version: '0.3.3'\n  };\n\n  codename = 'The Gumbo Variations';\n\n  log = console.log;\n\n  fs = require('fs');\n\n  path = require('path');\n\n  uuid = require('node-uuid');\n\n  express = require('express');\n\n  socketio = require('socket.io');\n\n  jquery = fs.readFileSync(__dirname + '/../vendor/jquery-1.6.4.min.js').toString();\n\n  sammy = fs.readFileSync(__dirname + '/../vendor/sammy-0.7.0.min.js').toString();\n\n  uglify = require('uglify-js');\n\n  jsdom = null;\n\n  coffeescript_helpers = \"var __slice = Array.prototype.slice;\\nvar __hasProp = Object.prototype.hasOwnProperty;\\nvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\\nvar __extends = function(child, parent) {\\n  for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\\n  function ctor() { this.constructor = child; }\\n  ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype;\\n  return child; };\\nvar __indexOf = Array.prototype.indexOf || function(item) {\\n  for (var i = 0, l = this.length; i < l; i++) {\\n    if (this[i] === item) return i;\\n  } return -1; };\".replace(/\\n/g, '');\n\n  minify = function(js) {\n    var ast;\n    ast = uglify.parser.parse(js);\n    ast = uglify.uglify.ast_mangle(ast);\n    ast = uglify.uglify.ast_squeeze(ast);\n    return uglify.uglify.gen_code(ast);\n  };\n\n  copy_data_to = function(recipient, sources) {\n    var k, obj, v, _i, _len, _results;\n    _results = [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      obj = sources[_i];\n      _results.push((function() {\n        var _results2;\n        _results2 = [];\n        for (k in obj) {\n          v = obj[k];\n          if (!recipient[k]) {\n            _results2.push(recipient[k] = v);\n          } else {\n            _results2.push(void 0);\n          }\n        }\n        return _results2;\n      })());\n    }\n    return _results;\n  };\n\n  views = {};\n\n  express.View.prototype.__defineGetter__('exists', function() {\n    var id, p;\n    p = this.path.replace(this.root + '/', '');\n    id = p.split('/')[0];\n    if (views[p]) return true;\n    p = p.replace(path.extname(p), '');\n    if (views[p]) return true;\n    p = this.path.replace(id + '/', '');\n    try {\n      fs.statSync(p);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  });\n\n  express.View.prototype.__defineGetter__('contents', function() {\n    var id, p;\n    p = this.path.replace(this.root + '/', '');\n    id = p.split('/')[0];\n    if (views[p]) return views[p];\n    p = p.replace(path.extname(p), '');\n    if (views[p]) return views[p];\n    p = this.path.replace(id + '/', '');\n    return fs.readFileSync(p, 'utf8');\n  });\n\n  zappa.app = function(func) {\n    var app, client, context, helpers, io, postrenders, route, verb, ws_handlers, zappa_used, _fn, _i, _len, _ref;\n    context = {\n      id: uuid(),\n      zappa: zappa,\n      express: express\n    };\n    context.root = path.dirname(module.parent.filename);\n    ws_handlers = {};\n    helpers = {};\n    postrenders = {};\n    app = context.app = express.createServer();\n    io = context.io = socketio.listen(app);\n    client = null;\n    zappa_used = false;\n    app.set('view engine', 'coffee');\n    app.register('.coffee', zappa.adapter(require('coffeekup').adapters.express, {\n      blacklist: ['format', 'autoescape', 'locals', 'hardcode', 'cache']\n    }));\n    app.set('views', path.join(context.root, '/views'));\n    _ref = ['get', 'post', 'put', 'del'];\n    _fn = function(verb) {\n      return context[verb] = function() {\n        var k, v, _ref2, _results;\n        if (arguments.length > 1) {\n          return route({\n            verb: verb,\n            path: arguments[0],\n            handler: arguments[1]\n          });\n        } else {\n          _ref2 = arguments[0];\n          _results = [];\n          for (k in _ref2) {\n            v = _ref2[k];\n            _results.push(route({\n              verb: verb,\n              path: k,\n              handler: v\n            }));\n          }\n          return _results;\n        }\n      };\n    };\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      verb = _ref[_i];\n      _fn(verb);\n    }\n    context.client = function(obj) {\n      var js, k, v, _results;\n      if (!zappa_used) context.use('zappa');\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        js = \";zappa.run(\" + v + \");\";\n        if (app.settings['minify']) js = minify(js);\n        _results.push(route({\n          verb: 'get',\n          path: k,\n          handler: js,\n          contentType: 'js'\n        }));\n      }\n      return _results;\n    };\n    context.coffee = function(obj) {\n      var js, k, v, _results;\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        js = \";\" + coffeescript_helpers + \"(\" + v + \")();\";\n        if (app.settings['minify']) js = minify(js);\n        _results.push(route({\n          verb: 'get',\n          path: k,\n          handler: js,\n          contentType: 'js'\n        }));\n      }\n      return _results;\n    };\n    context.js = function(obj) {\n      var js, k, v, _results;\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        js = String(v);\n        if (app.settings['minify']) js = minify(js);\n        _results.push(route({\n          verb: 'get',\n          path: k,\n          handler: js,\n          contentType: 'js'\n        }));\n      }\n      return _results;\n    };\n    context.css = function(obj) {\n      var css, k, v, _results;\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        css = String(v);\n        _results.push(route({\n          verb: 'get',\n          path: k,\n          handler: css,\n          contentType: 'css'\n        }));\n      }\n      return _results;\n    };\n    context.stylus = function(obj) {\n      var css, k, v, _results;\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        _results.push(css = require('stylus').render(v, {\n          filename: k\n        }, function(err, css) {\n          if (err) throw err;\n          return route({\n            verb: 'get',\n            path: k,\n            handler: css,\n            contentType: 'css'\n          });\n        }));\n      }\n      return _results;\n    };\n    context.helper = function(obj) {\n      var k, v, _results;\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        _results.push(helpers[k] = v);\n      }\n      return _results;\n    };\n    context.postrender = function(obj) {\n      var k, v, _results;\n      jsdom = require('jsdom');\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        _results.push(postrenders[k] = v);\n      }\n      return _results;\n    };\n    context.on = function(obj) {\n      var k, v, _results;\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        _results.push(ws_handlers[k] = v);\n      }\n      return _results;\n    };\n    context.view = function(obj) {\n      var k, v, _results;\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        _results.push(views[\"\" + context.id + \"/\" + k] = v);\n      }\n      return _results;\n    };\n    context.register = function(obj) {\n      var k, v, _results;\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        _results.push(app.register('.' + k, v));\n      }\n      return _results;\n    };\n    context.set = function(obj) {\n      var k, v, _results;\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        _results.push(app.set(k, v));\n      }\n      return _results;\n    };\n    context.enable = function() {\n      var i, _j, _len2, _results;\n      _results = [];\n      for (_j = 0, _len2 = arguments.length; _j < _len2; _j++) {\n        i = arguments[_j];\n        _results.push(app.enable(i));\n      }\n      return _results;\n    };\n    context.disable = function() {\n      var i, _j, _len2, _results;\n      _results = [];\n      for (_j = 0, _len2 = arguments.length; _j < _len2; _j++) {\n        i = arguments[_j];\n        _results.push(app.disable(i));\n      }\n      return _results;\n    };\n    context.use = function() {\n      var a, k, use, v, zappa_middleware, _j, _len2, _results;\n      zappa_middleware = {\n        static: function(p) {\n          if (p == null) p = path.join(context.root, '/public');\n          return express.static(p);\n        },\n        zappa: function() {\n          return function(req, res, next) {\n            var send;\n            send = function(code) {\n              res.contentType('js');\n              return res.send(code);\n            };\n            if (req.method.toUpperCase() !== 'GET') {\n              return next();\n            } else {\n              switch (req.url) {\n                case '/zappa/zappa.js':\n                  return send(client);\n                case '/zappa/jquery.js':\n                  return send(jquery);\n                case '/zappa/sammy.js':\n                  return send(sammy);\n                default:\n                  return next();\n              }\n            }\n          };\n        }\n      };\n      use = function(name, arg) {\n        if (arg == null) arg = null;\n        if (name === 'zappa') zappa_used = true;\n        if (zappa_middleware[name]) {\n          return app.use(zappa_middleware[name](arg));\n        } else if (typeof express[name] === 'function') {\n          return app.use(express[name](arg));\n        }\n      };\n      _results = [];\n      for (_j = 0, _len2 = arguments.length; _j < _len2; _j++) {\n        a = arguments[_j];\n        switch (typeof a) {\n          case 'function':\n            _results.push(app.use(a));\n            break;\n          case 'string':\n            _results.push(use(a));\n            break;\n          case 'object':\n            _results.push((function() {\n              var _results2;\n              _results2 = [];\n              for (k in a) {\n                v = a[k];\n                _results2.push(use(k, v));\n              }\n              return _results2;\n            })());\n            break;\n          default:\n            _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n    context.configure = function(p) {\n      var k, v, _results;\n      if (typeof p === 'function') {\n        return app.configure(p);\n      } else {\n        _results = [];\n        for (k in p) {\n          v = p[k];\n          _results.push(app.configure(k, v));\n        }\n        return _results;\n      }\n    };\n    context.settings = app.settings;\n    context.shared = function(obj) {\n      var js, k, v, _results;\n      if (!zappa_used) context.use('zappa');\n      _results = [];\n      for (k in obj) {\n        v = obj[k];\n        js = \";zappa.run(\" + v + \");\";\n        if (app.settings['minify']) js = minify(js);\n        route({\n          verb: 'get',\n          path: k,\n          handler: js,\n          contentType: 'js'\n        });\n        _results.push(v.apply(context, [context]));\n      }\n      return _results;\n    };\n    context.include = function(p) {\n      var sub;\n      sub = require(path.join(context.root, p));\n      return sub.include.apply(context, [context]);\n    };\n    route = function(r) {\n      if (typeof r.handler === 'string') {\n        return app[r.verb](r.path, function(req, res) {\n          if (r.contentType != null) res.contentType(r.contentType);\n          return res.send(r.handler);\n        });\n      } else {\n        return app[r.verb](r.path, function(req, res, next) {\n          var ctx, data, helper, name, render, result, _fn2;\n          ctx = {\n            app: app,\n            settings: app.settings,\n            request: req,\n            query: req.query,\n            params: req.params,\n            body: req.body,\n            session: req.session,\n            response: res,\n            next: next,\n            send: function() {\n              return res.send.apply(res, arguments);\n            },\n            redirect: function() {\n              return res.redirect.apply(res, arguments);\n            },\n            render: function() {\n              var k, v, _ref2, _results;\n              if (typeof arguments[0] !== 'object') {\n                return render.apply(this, arguments);\n              } else {\n                _ref2 = arguments[0];\n                _results = [];\n                for (k in _ref2) {\n                  v = _ref2[k];\n                  _results.push(render.apply(this, [k, v]));\n                }\n                return _results;\n              }\n            }\n          };\n          render = function() {\n            var args, _ref2;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            args[0] = context.id + '/' + args[0];\n            if ((_ref2 = args[1]) == null) args[1] = {};\n            if (typeof args[1] === 'function') args.splice(1, 0, {});\n            if (app.settings['databag']) args[1].params = data;\n            if (args[1].postrender != null) {\n              return res.render(args[0], args[1], function(err, str) {\n                return jsdom.env({\n                  html: str,\n                  src: [jquery],\n                  done: function(err, window) {\n                    var doctype, rendered;\n                    ctx.window = window;\n                    rendered = postrenders[args[1].postrender].apply(ctx, [window.$, ctx]);\n                    doctype = (window.document.doctype || '') + \"\\n\";\n                    return res.send(doctype + window.document.documentElement.outerHTML);\n                  }\n                });\n              });\n            } else {\n              return res.render.apply(res, args);\n            }\n          };\n          _fn2 = function(name, helper) {\n            return ctx[name] = function() {\n              var args;\n              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n              args.push(ctx);\n              return helper.apply(ctx, args);\n            };\n          };\n          for (name in helpers) {\n            helper = helpers[name];\n            _fn2(name, helper);\n          }\n          if (app.settings['databag']) {\n            data = {};\n            copy_data_to(data, [req.query, req.params, req.body]);\n          }\n          switch (app.settings['databag']) {\n            case 'this':\n              result = r.handler.apply(data, [ctx]);\n              break;\n            case 'param':\n              result = r.handler.apply(ctx, [data]);\n              break;\n            default:\n              result = r.handler.apply(ctx, [ctx]);\n          }\n          if (r.contentType != null) res.contentType(r.contentType);\n          if (typeof result === 'string') {\n            return res.send(result);\n          } else {\n            return result;\n          }\n        });\n      }\n    };\n    io.sockets.on('connection', function(socket) {\n      var build_ctx, c, ctx, h, name, _results;\n      c = {};\n      build_ctx = function() {\n        var ctx, helper, name, _fn2;\n        ctx = {\n          app: app,\n          io: io,\n          settings: app.settings,\n          socket: socket,\n          id: socket.id,\n          client: c,\n          emit: function() {\n            var k, v, _ref2, _results;\n            if (typeof arguments[0] !== 'object') {\n              return socket.emit.apply(socket, arguments);\n            } else {\n              _ref2 = arguments[0];\n              _results = [];\n              for (k in _ref2) {\n                v = _ref2[k];\n                _results.push(socket.emit.apply(socket, [k, v]));\n              }\n              return _results;\n            }\n          },\n          broadcast: function() {\n            var k, v, _ref2, _results;\n            if (typeof arguments[0] !== 'object') {\n              return socket.broadcast.emit.apply(socket.broadcast, arguments);\n            } else {\n              _ref2 = arguments[0];\n              _results = [];\n              for (k in _ref2) {\n                v = _ref2[k];\n                _results.push(socket.broadcast.emit.apply(socket.broadcast, [k, v]));\n              }\n              return _results;\n            }\n          }\n        };\n        _fn2 = function(name, helper) {\n          return ctx[name] = function() {\n            return helper.apply(ctx, arguments);\n          };\n        };\n        for (name in helpers) {\n          helper = helpers[name];\n          _fn2(name, helper);\n        }\n        return ctx;\n      };\n      ctx = build_ctx();\n      if (ws_handlers.connection != null) ws_handlers.connection.apply(ctx, [ctx]);\n      socket.on('disconnect', function() {\n        ctx = build_ctx();\n        if (ws_handlers.disconnect != null) {\n          return ws_handlers.disconnect.apply(ctx, [ctx]);\n        }\n      });\n      _results = [];\n      for (name in ws_handlers) {\n        h = ws_handlers[name];\n        _results.push((function(name, h) {\n          if (name !== 'connection' && name !== 'disconnect') {\n            return socket.on(name, function(data) {\n              ctx = build_ctx();\n              ctx.data = data;\n              switch (app.settings['databag']) {\n                case 'this':\n                  return h.apply(data, [ctx]);\n                case 'param':\n                  return h.apply(ctx, [data]);\n                default:\n                  return h.apply(ctx, [ctx]);\n              }\n            });\n          }\n        })(name, h));\n      }\n      return _results;\n    });\n    func.apply(context, [context]);\n    client = require('./client').build(zappa.version, app.settings);\n    client = \";\" + coffeescript_helpers + \"(\" + client + \")();\";\n    if (app.settings['minify']) client = minify(client);\n    if (app.settings['default layout']) {\n      context.view({\n        layout: function() {\n          doctype(5);\n          return html(function() {\n            head(function() {\n              var s, _j, _k, _len2, _len3, _ref2, _ref3;\n              if (this.title) title(this.title);\n              if (this.scripts) {\n                _ref2 = this.scripts;\n                for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {\n                  s = _ref2[_j];\n                  script({\n                    src: s + '.js'\n                  });\n                }\n              }\n              if (this.script) {\n                script({\n                  src: this.script + '.js'\n                });\n              }\n              if (this.stylesheets) {\n                _ref3 = this.stylesheets;\n                for (_k = 0, _len3 = _ref3.length; _k < _len3; _k++) {\n                  s = _ref3[_k];\n                  link({\n                    rel: 'stylesheet',\n                    href: s + '.css'\n                  });\n                }\n              }\n              if (this.stylesheet) {\n                link({\n                  rel: 'stylesheet',\n                  href: this.stylesheet + '.css'\n                });\n              }\n              if (this.style) return style(this.style);\n            });\n            return body(this.body);\n          });\n        }\n      });\n    }\n    return context;\n  };\n\n  zappa.run = function() {\n    var a, app, host, port, root_function, zapp, _i, _len, _ref;\n    host = null;\n    port = 3000;\n    root_function = null;\n    for (_i = 0, _len = arguments.length; _i < _len; _i++) {\n      a = arguments[_i];\n      switch (typeof a) {\n        case 'string':\n          if (isNaN(Number(a))) {\n            host = a;\n          } else {\n            port = Number(a);\n          }\n          break;\n        case 'number':\n          port = a;\n          break;\n        case 'function':\n          root_function = a;\n      }\n    }\n    zapp = zappa.app(root_function);\n    app = zapp.app;\n    if (host) {\n      app.listen(port, host);\n    } else {\n      app.listen(port);\n    }\n    log('Express server listening on port %d in %s mode', (_ref = app.address()) != null ? _ref.port : void 0, app.settings.env);\n    log(\"Zappa \" + zappa.version + \" \\\"\" + codename + \"\\\" orchestrating the show\");\n    return zapp;\n  };\n\n  zappa.adapter = function(engine, options) {\n    var _ref;\n    if (options == null) options = {};\n    if ((_ref = options.blacklist) == null) options.blacklist = [];\n    if (typeof engine === 'string') engine = require(engine);\n    return {\n      compile: function(template, data) {\n        template = engine.compile(template, data);\n        return function(data) {\n          var k, v, _ref2;\n          _ref2 = data.params;\n          for (k in _ref2) {\n            v = _ref2[k];\n            if (typeof data[k] === 'undefined' && __indexOf.call(options.blacklist, k) < 0) {\n              data[k] = v;\n            }\n          }\n          return template(data);\n        };\n      }\n    };\n  };\n\n  module.exports = zappa.run;\n\n  module.exports.run = zappa.run;\n\n  module.exports.app = zappa.app;\n\n  module.exports.adapter = zappa.adapter;\n\n  module.exports.version = zappa.version;\n\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":21120}]],"length":21120}
